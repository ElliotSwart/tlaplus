<?xml version="1.0" encoding="UTF-8"?>
<project name="TLA+ Tools" default="default" xmlns:jacoco="antlib:org.jacoco.ant">


	<!-- JaCoCo code coverage -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="lib/jacocoant.jar"/>
	</taskdef>

	<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
		<classpath>
			<pathelement location="lib/aspectjtools-1.9.2.jar" />
		</classpath>
	</taskdef>
	
	<!-- Similar to default except it skips test and only runs test-dist. This is called from pom.xml -->
	<target name="default-maven" depends="info" description="Default">
		<antcall target="compile" inheritall="true" inheritrefs="true" />
		<antcall target="compile-aj" inheritall="true" inheritrefs="true" />
		<antcall target="compile-test" inheritall="true" inheritrefs="true" />
		<!-- <antcall target="test" inheritall="true" inheritrefs="true" /> -->
		<antcall target="git-revision" inheritall="true" inheritrefs="true" />
		<antcall target="dist" inheritall="true" inheritrefs="true" />
		<antcall target="test-dist" inheritall="true" inheritrefs="true" />
	</target>


	<!-- Compiles and runs the short-running tests. -->
	<target name="shorttests" depends="info" description="Run tests">
		<antcall target="default" inheritall="true" inheritrefs="true" />
		<antcall target="test-verify" inheritall="true" inheritrefs="true" />
	</target>

	<!-- Compiles and runs *only* the long-running tests. Not the ones. -->
	<target name="longtests" depends="info" description="Run long-running tests">
		<antcall target="compile" inheritall="true" inheritrefs="true" />
		<antcall target="compile-aj" inheritall="true" inheritrefs="true">
			<!-- long tests require AspjectJ -->
	        <param name="withaj" value="true"/>
	    </antcall>
		<antcall target="compile-test" inheritall="true" inheritrefs="true" />
		<antcall target="dist" inheritall="true" inheritrefs="true" />
		<antcall target="test-dist-long" inheritall="true" inheritrefs="true" />
	</target>

	<!-- Compiles AspectJ auxiliary code -->
	<target name="compile-aj" if="withaj">
		<echo>
			====================================================================
			= The following warnings (Xlint:adviceDidNotMatch) can be ignored. =
			= We are doing load time weaving that kicks in when TLC gets       = 
			= started, not when it is compiled.                                =
			====================================================================
		</echo>
		<!-- compile aspectj related class files -->
		<iajc destdir="${class.dir}" debug="true" verbose="true" source="1.8" target="1.8">
			<sourceroots>
				<!-- Here we implicitly decide to use AspectJ Load-Time weaving by excludign ${src.dir} as a pathelement. Adding ${src.dir} results in aspects being woven at compile-time as part of the ant build. -->
				<pathelement location="${src-aj.dir}"/>
			</sourceroots>
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/aspectjrt-1.9.2.jar" />
				<pathelement location="lib/aspectjtools-1.9.2.jar" />
				<pathelement path="${class.dir}" />
			</classpath>
		</iajc>
		<!-- copy the resource files -->
		<copy todir="${class.dir}">
			<fileset dir="${src-aj.dir}">
				<include name="**/*.*" />
				<exclude name="**/*.aj" />
				<exclude name="**/*.java" />
				<exclude name="**/*.~*" />
				<exclude name="**/*##*" />
			</fileset>
		</copy>
		<!-- These files are requried for load time weaving and during runtime -->
		<copy todir="${class.dir}/lib">
			<fileset dir="lib/">
				<include name="aspectjrt-1.9.2.jar" />
				<include name="aspectjweaver-1.9.2.jar" />
			</fileset>
		</copy>
	</target>

	<!-- Executes accompanying long-running unit tests on jar file -->
	<target name="test-dist-long" unless="test.skip">
		<!-- compile unit tests -->
		<mkdir dir="${test.class.dir}" />
		<javac includeantruntime="false" srcdir="${test.dir}-long" destdir="${test.class.dir}" debug="true" verbose="false">
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/junit-4.12.jar" />
				<pathelement location="lib/hamcrest-core-1.3.jar" />
				<pathelement path="${class.dir}" />
			</classpath>
		</javac>
		<!-- copy class.dir to path with whitespace -->
		<!-- this is required by some tests to make sense -->
		<!-- even throw a "+" and whitespace into the mix -->
		<property name="ws.class.dir" value="TLA+ Tools" />
		<copy todir="${ws.class.dir}">
			<fileset dir="${class.dir}" />
		</copy>
		<!-- run junit tests on tlatools.jar -->
		<mkdir dir="${test.reports}/onJarLong" />
		<junit printsummary="yes" haltonfailure="no" haltonerror="no" maxmemory="4096m" forkmode="perTest" fork="yes">
			<!-- enable all assertions -->
			<jvmarg value="-ea"/>
			<jvmarg value="-javaagent:lib/aspectjweaver-1.9.2.jar" />
			<sysproperty key="org.aspectj.weaver.showWeaveInfo" value="false"/>
			<sysproperty key="aj.weaving.verbose" value="false"/>
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/junit-4.12.jar" />
				<pathelement location="lib/hamcrest-core-1.3.jar" />
				<pathelement location="${dist.file}" />
				<pathelement path="${test.class.dir}" />
				<!-- Need class.dir on path to find AspectJ related classes which don't get packaged into dist -->
				<pathelement path="${class.dir}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${test.reports}/onJarLong">
				<fileset dir="${test.dir}-long">
					<exclude name="**/MultiThreadedSpecTest.java"/>

					<!-- The following tests take way too long (hours). -->
					<!-- Reactivate when you start working on the fingerprint sets! -->
					<exclude name="**/DiskFPSetTest.java"/>
					<exclude name="**/FPSetTest.java"/>
					<exclude name="**/MSBDiskFPSetTest.java"/>
					<exclude name="**/OffHeapDiskFPSetTest.java"/>
					<exclude name="**/DiskStateQueueTest.java"/>

					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>

		<!-- remove copied class.dir -->
		<delete dir="${ws.class.dir}" deleteonexit="true"/>
	</target>

	<!-- Verifies TLC parts with NASA's pathfinder model checker -->
	<target name="test-verify">
		<mkdir dir="${test.class.dir}"/>
		<!-- Compile our boilerplate code needed to verify TLC. E.g. the StateQueueVerify creates -->
		<!-- examplary produces & consumers and a dummy implementation of StateQueue. -->
		<javac includeantruntime="false" srcdir="${test.dir}-verify" destdir="${test.class.dir}" debug="true" verbose="false">
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement path="${class.dir}" />
				<pathelement location="lib/jpf.jar" />
			</classpath>
		</javac>

		<mkdir dir="${test.reports}/verify" />
		<junit printsummary="yes" haltonfailure="no" haltonerror="no" maxmemory="4096m" forkmode="perTest" fork="yes" 
			dir="${basedir}/test-verify" >
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/junit-4.12.jar" />
				<pathelement location="lib/hamcrest-core-1.3.jar" />
				<pathelement location="lib/jpf.jar" />
				<pathelement location="lib/jpf-classes.jar" />
				<pathelement path="${class.dir}" />
				<pathelement path="${test.class.dir}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${test.reports}/verify">
				<fileset dir="${test.dir}-verify">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
</project>
