<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<!--
	<parent>
		<artifactId>parent</artifactId>
		<groupId>tlatoolbox</groupId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>../../pom.xml</relativePath>
	</parent>-->
	<groupId>tlatoolbox</groupId>
	<artifactId>org.lamport.tlatools</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<organization>
		<name>Microsoft Research Inria Joint Centre</name>
		<url>http://msr-inria.inria.fr/</url>
	</organization>

	<issueManagement>
		<system>GitHub</system>
		<url>https://github.com/tlaplus/tlaplus/issues</url>
	</issueManagement>

	<scm>
		<connection>scm:git:https://github.com/tlaplus/tlaplus</connection>
		<developerConnection>scm:git:https://github.com/tlaplus/tlaplus</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<!-- tycho requires maven >= 3.0 -->
	<prerequisites>
		<maven>3.0</maven>
	</prerequisites>

	<properties>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>

		<!-- http://maven.apache.org/general.html#encoding-warning  -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- These properties define a dummy certificate store that is used unless the developer passes overwrites to maven -->
		<!-- see http://stackoverflow.com/a/3620575 for how such an overwrite would look like. -->
		<keystore.path>${project.basedir}/../../keystore</keystore.path>
		<keystore.alias>msr</keystore.alias>
		<keystore.store.password>secret</keystore.store.password>
		<keystore.key.password>secret</keystore.key.password>

		<!--
				Set to the values below if the signature should include a timestamp. You want this for a release build
				because a timestamp makes sure the signature remains valid after the certificate expired.
				If you activate RFC3161, make sure the machine running the build has sufficient entropy available. Otherwise
				expect to see intermittent hangs when the build attempts to sign a jar. On Linux the haveged and rng-tools
				can help to collect entropy.
				<tsa.flag>-tsa</tsa.flag>
				<tsa.server>http://timestamp.comodoca.com</tsa.server>
				-->
		<tsa.flag></tsa.flag>
		<tsa.server></tsa.server>

		<!-- Report into the tlaplus organization at SonarQube. -->
		<!-- Organizations support reporting different branches. -->
		<sonar.organization>tlaplus</sonar.organization>

		<!-- tlatools is a non-standard maven project. Its heart is customBuild.xml written for ant          -->
		<!-- which gets invoked from maven. Unfortunately, it means that the tasks which are executed        -->
		<!-- by ant are not visible to maven. In this case it results in sonar not finding necessary         -->
		<!-- data to include coverage information. The properties below make sure that sonar finds the data. -->
		<sonar.sources>src,src-aj</sonar.sources>
		<sonar.tests>test,test-verify,test-long,test-concurrent</sonar.tests>

		<sonar.java.binaries>class</sonar.java.binaries>
		<sonar.java.libraries>lib/*.jar</sonar.java.libraries>

		<sonar.java.test.binaries>class,test-class</sonar.java.test.binaries>
		<sonar.java.test.libraries>lib/*.jar</sonar.java.test.libraries>

		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.surefire.reportsPath>target/surefire-reports</sonar.surefire.reportsPath>
		<sonar.junit.reportsPath>target/surefire-reports</sonar.junit.reportsPath>
		<sonar.jacoco.reportPaths>target/code-coverage.exec</sonar.jacoco.reportPaths>

		<class.src>${project.basedir}/src</class.src>
		<class.src.aj>${project.basedir}/src-aj</class.src.aj>
		<class.output>${project.build.directory}/class</class.output>
		<test.src>${project.basedir}/test</test.src>
		<test.output>${project.build.directory}/test-class</test.output>
		<test.model>${project.basedir}/test-model</test.model>
		<test.whitespacedirectory>${project.basedir}/TLA+ Tools</test.whitespacedirectory>
	</properties>

	<build>
		<directory>${project.basedir}/target</directory>
		<sourceDirectory>${class.src}</sourceDirectory>
		<outputDirectory>${class.output}</outputDirectory>
		
		<testSourceDirectory>${test.src}</testSourceDirectory>
		<testOutputDirectory>${test.output}</testOutputDirectory>
		<resources>
			<resource>
				<directory>${class.src}</directory>
				<excludes>
					<exclude>**/*.java</exclude>
					<exclude>**/*.~*</exclude>
					<exclude>**/*##*</exclude>
					<exclude>**/*.09-09-07</exclude>
					<exclude>**/*.09-07-02</exclude>
					<exclude>**/*.11-02-10</exclude>
					<exclude>**/*.jpg</exclude>
				</excludes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>${test.src}</directory>
				<includes>
					<include>**/*.dot</include>
					<include>**/*.dump</include>
				</includes>
			</testResource>
			<!-- Ensure all classes are on test classpath -->
			<testResource>
				<directory>${class.output}</directory>
				<includes>
					<include>**/*</include>
				</includes>
			</testResource>
		</testResources>
		<plugins>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<!-- here the phase you need -->
						<phase>process-test-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${test.whitespacedirectory}</outputDirectory>
							<resources>
								<resource>
									<directory>${test.output}</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-test-model-resources</id>
						<!-- here the phase you need -->
						<phase>process-test-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${test.output}/test-model</outputDirectory>
							<resources>
								<resource>
									<directory>${test.model}</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M7</version>
				<configuration>
					<forkCount>1</forkCount>
					<reuseForks>true</reuseForks>
					<paralell>classesAndMethods</paralell>
					<!--<threadCount>3</threadCount>-->
					<useUnlimitedThreads>true</useUnlimitedThreads>
					<argLine>-ea -XX:MaxDirectMemorySize=512k -XX:+UseParallelGC</argLine>
					<redirectTestOutputToFile>true</redirectTestOutputToFile>
					<skip>true</skip>
					<runOrder>alphabetical</runOrder>
					<systemProperties>
						<tlc2.tool.fp.FPSet.impl>tlc2.tool.fp.OffHeapDiskFPSet</tlc2.tool.fp.FPSet.impl>
						<tlc2.tool.distributed.TLCWorker.threadCount>4</tlc2.tool.distributed.TLCWorker.threadCount>
					</systemProperties>
					<excludedGroups>util.DebuggerTest,util.LongTest,util.TTraceTest, util.IndependentlyRunTest, util.ConcurrentTest, util.IndependentlyRunTTraceTest</excludedGroups>
					<!--<forkedProcessTimeoutInSeconds>20</forkedProcessTimeoutInSeconds>-->
				</configuration>
				<executions>
					<execution>
						<id>concurrently-testable</id>
						<goals>
							<goal>test</goal>
						  </goals>
						  <configuration>
							<skip>false</skip>
							
							<includes>
								<include>pcal/**</include>
								<include>tla2sany/**</include>
								<include>tlc2/*.java</include>
								<include>tlc2/model/**</include>
								<include>tlc2/module/**</include>
								<include>tlc2/output/**</include>
								<include>tlc2/tool/*.java</include>
								<include>tlc2/tool/checkpoint/**</include>
								<include>tlc2/tool/coverage/**</include>
								<include>tlc2/tool/distributed/**</include>
								<include>tlc2/tool/doinitfunctor/**</include>
								<include>tlc2/tool/evalorder/**</include>
								<include>tlc2/tool/other/**</include>
								<include>tlc2/tool/queue/**</include>
								<include>tlc2/tool/simulation/**</include>
								<include>tlc2/utils/**</include>
								<include>util/**</include>
							</includes>
							<excludes>
								<exclude>tlc2/tool/UserModuleOverrideTest.java</exclude>
								<exclude>tlc2/tool/UserModuleOverrideFromJarTest.java</exclude>
								<exclude>tlc2/tool/UserModuleOverrideAnnotationTest.java</exclude>
							</excludes>
						  </configuration>
					</execution>
					<execution>
						<id>user-module</id>
						<goals>
							<goal>test</goal>
						  </goals>
						<configuration>
							<skip>false</skip>
							<includes>
								<include>tlc2/tool/EvaluatingValueTest.java</include>
								<include>tlc2/tool/UserModuleOverrideAnnotationTest.java</include>
								<include>tlc2/tool/UserModuleOverrideTest.java</include>
								<include>tlc2/tool/UserModuleOverrideAnnotationTest.java</include>
							</includes>
							<additionalClasspathElements>
								<additionalClasspathElement>test-model/UserModuleOverrideFromJar.jar</additionalClasspathElement>
								<additionalClasspathElement>test-model</additionalClasspathElement>
							</additionalClasspathElements>
						</configuration>
					</execution>
					<execution>
						<id>fpset</id>
						<goals>
							<goal>test</goal>
						  </goals>
						  <configuration>
							<skip>false</skip>
							<includes>
								<include>tlc2/tool/fp/**</include>
							</includes>
						  </configuration>
					</execution>
					<execution>
						<id>suite</id>
						<goals>
							<goal>test</goal>
						  </goals>
						  <configuration>
							<skip>false</skip>
							<includes>
								<include>tlc2/tool/suite/**</include>
							</includes>
						  </configuration>
					</execution>
					<execution>
						<id>values</id>
						<goals>
							<goal>test</goal>
						  </goals>
						  <configuration>
							<skip>false</skip>
							<includes>
								<include>tlc2/value/**</include>
							</includes>
						  </configuration>
					</execution>
					<execution>
						<id>liveness</id>
						<goals>
							<goal>test</goal>
						  </goals>
						  <configuration>
							<skip>false</skip>
							<reuseForks>true</reuseForks>
							<includes>
								<include>tlc2/tool/liveness/**</include>
							</includes>
						  </configuration>
					</execution>
					<execution> <!-- The fewer there are of these, the faster the suite will run -->
						<id>independantly-run-tests</id>
						<goals>
							<goal>test</goal>
						  </goals>
						  <configuration>
							<skip>false</skip>
							<groups>util.IndependentlyRunTest,util.DebuggerTest</groups>
							<excludedGroups>util.LongTest, util.ConcurrentTest</excludedGroups>
							<reuseForks>false</reuseForks>
							<includes> <!-- Reduce lengthy search process by limited to applicable directories -->
								<include>tlc2/debug/**</include>
								<include>pcal/RABTest.java</include>
								<include>pcal/SBBTest.java</include>
								<include>tla2sany/drivers/Github429Test.java</include>
								<include>tla2sany/drivers/IllegalOperatorTest.java</include>
								<include>tlc2/tool/DepthFirstDieHardTest.java</include>
								<include>tlc2/tool/DepthFirstErrorTraceTest.java</include>
								<include>tlc2/tool/DepthFirstTerminateTest.java</include>
								<include>tlc2/tool/DiameterTest.java</include>
								<include>tlc2/tool/EvalExceptionLivenessTest.java</include>
								<include>tlc2/tool/EvalExceptionTest.java</include>
								<include>tlc2/tool/MinimumDiameterTest.java</include>
								<include>tlc2/tool/MonolithSpecTest.java</include>
								<include>tlc2/tool/PrintTraceRaceTest.java</include>
								<include>tlc2/tool/TLCSetMultiSimTest.java</include>
								<include>tlc2/tool/TLCSetSimTest.java</include>
								<include>tlc2/tool/ViewMapTest.java</include>
								<include>tlc2/tool/checkpoint/CheckpointWhenTimeBoundTest.java</include>
								<include>tlc2/tool/liveness/BidirectionalTransitions2CxTest.java</include>
								<include>tlc2/tool/liveness/BidirectionalTransitions2CyTest.java</include>
								<include>tlc2/tool/liveness/CodePlexBug08EWD840FL1Test.java</include>
								<include>tlc2/tool/liveness/CodePlexBug08EWD840FL2FromCheckpointTest.java</include>
								<include>tlc2/tool/liveness/CodePlexBug08EWD840FL2Test.java</include>
								<include>tlc2/tool/liveness/CodePlexBug08EWD840FL3Test.java</include>
								<include>tlc2/tool/liveness/ErrorTraceConstructionTest.java</include>
								<include>tlc2/tool/liveness/Github317aTest.java</include>
								<include>tlc2/tool/liveness/Github710bTest.java</include>
								<include>tlc2/tool/liveness/LoopForcedPartialTest.java</include>
								<include>tlc2/tool/liveness/NoSymmetryTableauModelCheckerTest.java</include>
								<include>tlc2/tool/liveness/OneBitMutexNoSymmetryTest.java</include>
								<include>tlc2/tool/liveness/UnsymmetricModelCheckerTestB.java</include>
								<include>tlc2/tool/liveness/simulation/StutteringTest.java</include>
								<include>tlc2/tool/simulation/NQSpecTest.java*</include>
								<include>tlc2/tool/simulation/SimulationWorkerTest.java</include>
							</includes>
							<excludes>
								<exclude>tlc2/tool/EvaluatingValueTest.java</exclude>
							</excludes>
						  </configuration>
					</execution>
					<execution>
						<id>ttrace-tests-concurrent</id>
						<goals>
							<goal>test</goal>
						  </goals>
						<configuration>
							<reuseForks>true</reuseForks>
							<excludedGroups>util.LongTest, util.IndependentlyRunTest</excludedGroups>
							<groups>util.TTraceTest</groups>
							<skip>false</skip>
							<includes>
								<include>**/*_TTraceTest.java</include>
							</includes>
						</configuration>
					</execution>
					<execution>
						<id>ttrace-tests-individual</id>
						<goals>
							<goal>test</goal>
						  </goals>
						<configuration>
							<reuseForks>false</reuseForks>
							<excludedGroups>util.LongTest</excludedGroups>
							<groups>util.IndependentlyRunTTraceTest</groups>
							<skip>false</skip>
							<includes>
								<include>pcal/RABTest_TTraceTest.java</include>
								<include>pcal/SBBTest_TTraceTest.java</include>
								<include>tlc2/tool/PrintTraceRaceTest_TTraceTest.java</include>
								<include>tlc2/tool/liveness/BidirectionalTransitions2CxTest.java</include>
								<include>tlc2/tool/liveness/BidirectionalTransitions2CyTest.java</include>
								<include>tlc2/tool/liveness/CodePlexBug08EWD840FL1Test_TTraceTest.java</include>
								<include>tlc2/tool/liveness/CodePlexBug08EWD840FL2Test_TTraceTest.java</include>
								<include>tlc2/tool/liveness/CodePlexBug08EWD840FL3Test_TTraceTest.java</include>
								<include>tlc2/tool/liveness/ErrorTraceConstructionTest_TTraceTest.java</include>
								<include>tlc2/tool/liveness/LoopForcedPartialTest_TTraceTest.java</include>
								<include>tlc2/tool/liveness/OneBitMutexNoSymmetryTest_TTraceTest.java</include>
								<include>tlc2/tool/liveness/UnsymmetricModelCheckerTestB_TTraceTest.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.surefire</groupId>
						<artifactId>surefire-junit47</artifactId>
						<version>3.0.0-M7</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<outputDirectory>${project.build.directory}/dist</outputDirectory>
					<archive>
						<manifest>
							<mainClass>tlc2.TLC</mainClass>
						</manifest>
						<manifestEntries>
							<Build-Tag>${env.BUILD_TAG}</Build-Tag>
							<Build-TimeStamp>${maven.build.timestamp.format}</Build-TimeStamp>
							<Implementation-Title>TLA+ Tools</Implementation-Title>

							<!-- Git revision -->
							<X-Git-Branch>${git.branch}</X-Git-Branch>
							<X-Git-Tag>${git.tag}</X-Git-Tag>
							<X-Git-Revision>${git.revision}</X-Git-Revision>
							<X-Git-ShortRevision>${git.shortRevision}</X-Git-ShortRevision>
							<X-Git-BuildNumber>${git.branch}_${git.tag}_${git.shortRevision}</X-Git-BuildNumber>
							<X-Git-Commits-Count>${git.commitsCount}</X-Git-Commits-Count>

							<!-- App-Name and Permissions is required by Java Webstart used by distributed TLC -->
							<!-- Depending on security level, the user will see a warning otherwise. -->
							<!-- http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/security/manifest.html -->
							<Application-Name>TLC</Application-Name>
							<permissions>all-permissions</permissions>
							<!-- won't work with 'sandbox' as it writes files -->
						</manifestEntries>
					  </archive>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
			</plugin>

			<!-- Fail the build early and with a clear error message if the Java 11
				dependency isn't satisfied. https://github.com/tlaplus/tlaplus/issues/278 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>3.0.0-M2</version>
				<executions>
					<execution>
						<id>enforce-java</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireJavaVersion>
									<version>17</version>
								</requireJavaVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- https://github.com/elab/jgit-buildnumber -->
				<groupId>com.labun.buildnumber</groupId>
				<artifactId>jgit-buildnumber-maven-plugin</artifactId>
				<version>2.7.0</version>
				<executions>
					<execution>
						<id>jgit-buildnumber</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>extract-buildnumber</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
				  <execution>
					<id>auto-clean</id>
					<phase>initialize</phase>
					<goals>
					  <goal>clean</goal>
					</goals>
					<configuration>
						<filesets>
							<fileset>
								<!-- Delete the ../states/ folder created by the Ant JUnit tests as part -->
								<directory>${basedir}/states/</directory>
								<includes>
									<include>**/*</include>
								</includes>
								<followSymlinks>false</followSymlinks>
							</fileset>
						</filesets>
					</configuration>
				  </execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>com.sun.mail</groupId>
			<artifactId>jakarta.mail</artifactId>
			<version>1.6.3</version>
		</dependency>

		<dependency>
			<groupId>com.sun.mail</groupId>
			<artifactId>smtp</artifactId>
			<version>1.6.3</version>
		</dependency>

		<!-- REPL.java imports classes from org.jline.  The Toolbox (being an OSGi based Rich Client Platform) -->
		<!-- does not see the jline jars references in customBuild.xml or .classpath.  It has to find jline    -->
		<!-- elsewhere such as in the target platform (TLAToolbox.target) or on Maven Central.  For jline      -->
		<!-- there exists no p2 repository that we could add to our target platform.  However, an OSGi-fied    -->
		<!-- jline exists on Maven Central.                                                                    -->
		<!-- https://mvnrepository.com/artifact/org.jline/jline-reader -->
		<dependency>
			<groupId>org.jline</groupId>
			<artifactId>jline-reader</artifactId>
			<version>3.14.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.eclipse.lsp4j/org.eclipse.lsp4j.jsonrpc.debug -->
		<dependency>
			<groupId>org.eclipse.lsp4j</groupId>
			<artifactId>org.eclipse.lsp4j.debug</artifactId>
			<version>0.12.0</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.easymock/easymock -->
		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<version>3.3.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.openjdk.jmh</groupId>
			<artifactId>jmh-generator-annprocess</artifactId>
			<version>1.21</version>
		</dependency>

	</dependencies>

	<!-- August 2014 - TL
           added a non-default profile (must be called explicitly)
           which creates a jar file and set XMLExporter as the main class.
       -->
	<profiles>
		<!-- Run tests on distribution rather than source -->
		<profile>
			<id>test-dist</id>
		</profile>

		<!-- Executes long-running unit tests -->
		<profile>
			<id>test-long</id>

		</profile>

		<!-- Builds jmh benchmark -->
		<profile>
			<id>benchmark</id>
			<build>
				<plugins>
					<plugin>
						<groupId>pw.krejci</groupId>
						<artifactId>jmh-maven-plugin</artifactId>
						<version>0.2.2</version>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.openjdk.jmh</groupId>
					<artifactId>jmh-core</artifactId>
					<version>1.35</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<!-- Verifies TLC parts with NASA's pathfinder model checker -->
		<profile>
			<id>test-verify</id>
		</profile>
		<profile>
			<id>coverage</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>0.8.8</version>
						<executions>
							<execution>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<!-- attached to Maven test phase -->
							<execution>
								<id>report</id>
								<phase>test</phase>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>OSGi</id>
			<properties>

				<!-- https://wiki.eclipse.org/Tycho/Release_Notes/1.4 -->
				<tycho-version>1.5.1</tycho-version>

				<!-- no default here -->
				<tycho.test.vm.argline>-Xmx500m -Xdebug -Xrunjdwp:transport=dt_socket,address=1044,server=y,suspend=n</tycho.test.vm.argline>
				<tycho.test.vm.useUiThread>false</tycho.test.vm.useUiThread>

			</properties>
			<build>
				<plugins>
					<!-- enable tycho build extension -->
					<plugin>
						<groupId>org.eclipse.tycho</groupId>
						<artifactId>tycho-maven-plugin</artifactId>
						<version>${tycho-version}</version>
						<extensions>true</extensions>
					</plugin>

					<!-- Compile java sources and exclude aspects -->
					<plugin>
						<groupId>org.eclipse.tycho</groupId>
						<artifactId>tycho-compiler-plugin</artifactId>
						<version>${tycho-version}</version>
						<configuration>
							<!-- Ignore compiler errors due to forbidden sun.misc.Unsafe imports -->
							<!-- https://bugs.eclipse.org/369187 -->
							<compilerArgument>-err:-forbidden</compilerArgument>
							<excludeResources>
								<exludeResource>**/*.aj</exludeResource>
							</excludeResources>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.eclipse.tycho</groupId>
						<artifactId>tycho-packaging-plugin</artifactId>
						<version>${tycho-version}</version>
						<configuration>
							<archive>
								<manifestEntries>
									<Implementation-Title>TLA+ Tools</Implementation-Title>
									<X-Git-ShortRevision>${buildNumber}</X-Git-ShortRevision>
								</manifestEntries>
							</archive>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.eclipse.tycho</groupId>
						<artifactId>target-platform-configuration</artifactId>
						<version>${tycho-version}</version>
						<configuration>
							<!-- Some dependencies such as jline referenced by org.lamport.tlatools   -->
							<!-- cannot be found in the Toolbox's target platform (TLAToolbox.target) -->
							<!-- because the dependencies are not made available in p2 repositories.  -->
							<!-- However, sometimes OSGi-fied dependencies are made available on      -->
							<!-- Maven Central.  'pomDependencies' makes this build look there too.    -->
							<!-- https://wiki.eclipse.org/Tycho/Target_Platform#.22POM_dependencies_consider.22 -->
							<pomDependencies>consider</pomDependencies>
							<!-- recommended: use p2-based target platform resolver -->
							<resolver>p2</resolver>
							<ignoreTychoRepositories>true</ignoreTychoRepositories>
							<!-- Include the pack200 artifacts in the p2 repository. This increases
								the size of the p2 repository (jars + pack.gz), but reduces the load on the
								server hosting the repository as clients download the compressed pack.gz files. -->
							<includePackedArtifacts>true</includePackedArtifacts>
							<!-- use existing target platform definition -->
							<target>
								<artifact>
									<groupId>tlatoolbox</groupId>
									<artifactId>org.lamport.tla.toolbox.product.product</artifactId>
									<version>1.4.0-SNAPSHOT</version>
									<classifier>TLAToolbox</classifier>
								</artifact>
							</target>

							<!-- Need to specify mininum Java version. This defines what
								 java.* packages are available during dependency resolution.
								 Java 1.4, e.g. does not come with "java.security.sasl", a
								 package that is indirectly referenced by the toolbox (indirectly via
								 org.apache.mina.core).
								 see http://dev.eclipse.org/mhonarc/lists/cbi-dev/msg00166.html -->
							<executionEnvironment>JavaSE-17</executionEnvironment>

							<!-- configure the p2 target environments for multi-platform build -->
							<environments>

								<!-- Linux -->
								<environment>
									<os>linux</os>
									<ws>gtk</ws>
									<arch>x86_64</arch>
								</environment>

								<!-- Windows -->
								<environment>
									<os>win32</os>
									<ws>win32</ws>
									<arch>x86_64</arch>
								</environment>

								<!-- Mac -->
								<environment>
									<os>macosx</os>
									<ws>cocoa</ws>
									<arch>x86_64</arch>
								</environment>

							</environments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>aspectj</id>
			<build>
				<!-- Copy needed files to source directory -->
				<resources>
					<resource>
						<directory>${class.src.aj}</directory>
						<includes>
							<include>**/*.*</include>
						</includes>
						<excludes>
							<exclude>**/*.aj</exclude>
							<exclude>**/*.java</exclude>
							<exclude>**/*.~*</exclude>
							<exclude>**/*##*</exclude>
						</excludes>
					</resource>
				</resources>
				<plugins>
					<!-- Add source dir -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>3.2.0</version>
						<executions>
							<execution>
								<id>add-source</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>${class.src.aj}</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Compile aspects -->
					<plugin>
						<!-- https://github.com/nickwongdev/aspectj-maven-plugin -->
						<groupId>com.nickwongdev</groupId>
						<artifactId>aspectj-maven-plugin</artifactId>
						<version>1.12.1</version>
						<configuration>
							<ajdtBuildDefFile>build.ajproperties</ajdtBuildDefFile>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>compile</goal>
								</goals>
								<configuration>
									<complianceLevel>1.8</complianceLevel>
									<source>1.8</source>
									<target>1.8</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.aspectj</groupId>
					<artifactId>aspectjrt</artifactId>
					<version>1.9.2</version>
				</dependency>

				<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjtools -->
				<dependency>
					<groupId>org.aspectj</groupId>
					<artifactId>aspectjtools</artifactId>
					<version>1.9.2</version>
				</dependency>

				<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
				<dependency>
					<groupId>org.aspectj</groupId>
					<artifactId>aspectjweaver</artifactId>
					<version>1.9.2</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>exporter</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-shade-plugin</artifactId>
						<version>2.0</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>shade</goal>
								</goals>
								<configuration>
									<includes>
										<include>**/tlatools*</include>
									</includes>
									<minimizeJar>true</minimizeJar>
									<transformers>
										<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
											<manifestEntries>
												<Main-Class>tla2sany.xml.XMLExporter</Main-Class>
												<Build-Tag>${env.BUILD_TAG}</Build-Tag>
												<Build-TimeStamp>${maven.build.timestamp.format}</Build-TimeStamp>
												<Implementation-Title>TLA+ Tools</Implementation-Title>
											</manifestEntries>
										</transformer>
									</transformers>
									<filters>
										<filter>
											<artifact>*:*</artifact>
											<excludes>
												<exclude>**/*Test*.*</exclude>
											</excludes>
										</filter>
									</filters>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>dev</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-clean-plugin</artifactId>
						<version>3.2.0</version>
						<executions>
						  <execution>
							<id>auto-clean</id>
							<phase>initialize</phase>
							<goals>
							  <goal>clean</goal>
							</goals>
							<configuration>
								<excludeDefaultDirectories>true</excludeDefaultDirectories>
								<filesets>
									<fileset>
										<!-- Delete the test model to allow tests to run -->
										<directory>${test.output}/test-model/</directory>
										<includes>
											<include>**/*</include>
										</includes>
										<followSymlinks>false</followSymlinks>
									</fileset>
									<fileset>
										<!-- Delete the ../states/ folder created by the Ant JUnit tests as part -->
										<directory>${basedir}/states/</directory>
										<includes>
											<include>**/*</include>
										</includes>
										<followSymlinks>false</followSymlinks>
									</fileset>
								</filesets>
							</configuration>
						  </execution>
						</executions>
					</plugin>
					
				</plugins>
			</build>
		</profile>
	</profiles>
</project>